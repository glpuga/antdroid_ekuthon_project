#!/usr/bin/python2
# -*- encoding: utf-8 -*-

# antdroid_teleop_key: provides control to antdroid from keyboard.
#
# Copyright (C) 2015 Alexander Gil and Javier RomÃ¡n
#
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


import roslib
roslib.load_manifest('antdroid_teleop')
import rospy
import time

from geometry_msgs.msg import Twist
from std_msgs.msg import Bool
from antdroid_msgs.msg import Speed
from antdroid_msgs.msg import Foot
from antdroid_msgs.msg import Height
from antdroid_msgs.msg import Gait
from antdroid_msgs.msg import Balance



import sys, select, termios, tty

msg = """
Control Your Antdroid!
---------------------------
Moving around:          Balancing body:
   q    w    e             Q    W    E 
   a         d             A         D
   z    x    c             Z    X    C

CTRL-A / CTRL-D : rotate body left/right 20 degrees.
R / T : balance body yaw +/- 2 degrees.

+ / - : increase/decrease speed.
6 / 9 : increase/decrease foot distance. (Advanced Mode only)
5 / 8 : increase/decrease height.
4 / 7 : increase/decrease step lenght.

f: change gait ripple/tripod
g: attack
h: say hello

CTRL-C to quit
"""

moveBindings = {
        'q':(1,1),
        'w':(1,0),
        'e':(1,-1),
        'a':(0,1),
        'd':(0,-1),
        'x':(-1,0),
        'z':(-1,1),
        'c':(-1,-1),
           }

rotateBindings={
        '\x01':(1),
        '\x04':(-1),
          }

speedBindings={
        '+':(1),
        '-':(0),
        }

footBindings={
        '6':(1),
        '9':(0),
        }

heightBindings={
        '5':(1),
        '8':(0),
        }

gaitBindings={
        'f':(1),
        }

stepBindings={
        '4':(1),
        '7':(0),
}

balanceBindings = {
        'Q':(1,1,0),
        'W':(1,0,0),
        'E':(1,-1,0),
        'A':(0,1,0),
        'D':(0,-1,0),
        'X':(-1,0,0),
        'Z':(-1,1,0),
        'C':(-1,-1,0),
        'R':(0,0,1),
        'T':(0,0,-1),
           }
attackBindings = {
        'g':(1),
}

sayHelloBindings = {
        'h':(1),
}


def read_single_keypress():
    """Waits for a single keypress on stdin.

    This is a silly function to call if you need to do it a lot because it has
    to store stdin's current setup, setup stdin for reading single keystrokes
    then read the single keystroke then revert stdin back after reading the
    keystroke.

    Returns the character of the key that was pressed (zero on
    KeyboardInterrupt which can happen when a signal gets handled)

    """
    import termios, fcntl, sys, os
    fd = sys.stdin.fileno()
    # save old state
    flags_save = fcntl.fcntl(fd, fcntl.F_GETFL)
    attrs_save = termios.tcgetattr(fd)
    # make raw - the way to do this comes from the termios(3) man page.
    attrs = list(attrs_save) # copy the stored version to update
    # iflag
    attrs[0] &= ~(termios.IGNBRK | termios.BRKINT | termios.PARMRK 
                  | termios.ISTRIP | termios.INLCR | termios. IGNCR 
                  | termios.ICRNL | termios.IXON )
    # oflag
    attrs[1] &= ~termios.OPOST
    # cflag
    attrs[2] &= ~(termios.CSIZE | termios. PARENB)
    attrs[2] |= termios.CS8
    # lflag
    attrs[3] &= ~(termios.ECHONL | termios.ECHO | termios.ICANON
                  | termios.ISIG | termios.IEXTEN)
    termios.tcsetattr(fd, termios.TCSANOW, attrs)
    # turn off non-blocking
    fcntl.fcntl(fd, fcntl.F_SETFL, flags_save & ~os.O_NONBLOCK)
    # read a single keystroke
    try:
        ret = sys.stdin.read(1) # returns a single character
    except KeyboardInterrupt: 
        ret = 0
    finally:
        # restore old state
        termios.tcsetattr(fd, termios.TCSAFLUSH, attrs_save)
        fcntl.fcntl(fd, fcntl.F_SETFL, flags_save)
    return ret


def manage_balance():

    global last_pitch
    global last_roll
    global last_yaw

    global pitch
    global roll

    max_pitch = MAX_ANGLE - abs(last_roll)
    max_roll = MAX_ANGLE - abs(last_pitch)
    max_yaw = MAX_ANGLE

    pitch = continuous_movement(pitch, roll, last_pitch, max_pitch)
    roll = continuous_movement(roll, pitch, last_roll, max_roll)

    last_pitch = update_angle(max_pitch, pitch, last_pitch)
    last_roll = update_angle(max_roll, roll, last_roll)
    last_yaw = update_angle(max_yaw, yaw, last_yaw)

    balance = Balance()
    balance.pitch = last_pitch 
    balance.roll = last_roll 
    balance.yaw = last_yaw 

    balance_pub.publish(balance)

    return

def continuous_movement(axis, oppsite_axis, last_angle, max_angle):
    if((oppsite_axis != 0 )& (abs(last_angle) == max_angle) & (max_angle != 0)):
        return -(last_angle / max_angle)

    return axis

def update_angle(max_angle, axis, last_angle):
    
    angle_step = 20

    if ((last_angle + axis * angle_step >= (- max_angle)) & 
        (last_angle + axis * angle_step <= max_angle) & (axis != 0)):
        
        last_angle += axis * angle_step

    return last_angle




if __name__=="__main__":
    settings = termios.tcgetattr(sys.stdin)
    
    rospy.init_node('antdroid_teleop')
    pub = rospy.Publisher('/control_interpreter/cmd_vel', Twist, queue_size=1)
    speed_pub = rospy.Publisher('/control_interpreter/speed', Speed, queue_size=1)
    foot_pub = rospy.Publisher('/control_interpreter/foot', Foot, queue_size=1)
    height_pub = rospy.Publisher('/control_interpreter/height', Height, queue_size=1)
    gait_pub = rospy.Publisher('/control_interpreter/gait', Gait, queue_size=1)
    step_pub = rospy.Publisher('/control_interpreter/step', Bool, queue_size=1)
    balance_pub = rospy.Publisher('/control_interpreter/balance', Balance, queue_size=1)
    attack_pub = rospy.Publisher('/control_interpreter/attack', Bool, queue_size=1)
    say_hello_pub = rospy.Publisher('/control_interpreter/say_hello', Bool, queue_size=1)

    wait = rospy.get_param('~wait', 0)

    x = 0
    y = 0
    th = 0
    speed = 2
    foot = 2
    height = 2
    gait = 1
    is_gait = 0 
    step = 0
    is_step = 0
    is_attack = 0
    is_say_hello = 0

    last_pitch = 0
    last_roll = 0
    last_yaw = 0

    pitch = 0
    roll = 0
    yaw = 0

    MAX_ANGLE = 180

    time.sleep(wait)

    try:
        print msg
        while(1):
            key = read_single_keypress()
            if key in moveBindings.keys():
                x = moveBindings[key][0]
                y = moveBindings[key][1]
            elif key in rotateBindings.keys():
                th = rotateBindings[key]

            elif key in speedBindings.keys():
                speed = speedBindings[key]

            elif key in footBindings.keys():
                foot = footBindings[key]

            elif key in heightBindings.keys():
                height = heightBindings[key]

            elif key in gaitBindings.keys():
                if gait == 1:
                    gait = 2
                else:
                    gait = 1

                is_gait = 1

            elif key in stepBindings.keys():
                step = stepBindings[key]
                is_step = 1

            elif key in balanceBindings.keys():
                pitch = balanceBindings[key][0]
                roll = balanceBindings[key][1]
                yaw = balanceBindings[key][2]
                manage_balance()

            elif key in attackBindings.keys():
                is_attack = 1

            elif key in sayHelloBindings.keys():
                is_say_hello = 1
            else:
                if (key == '\x03'):
                    break


            twist = Twist()
            twist.linear.x = x; twist.linear.y = y; twist.linear.z = 0
            twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = th
            
            speed_msg = Speed()
            speed_msg.speed = speed
            
            foot_msg = Foot()
            foot_msg.footDistance = foot
            
            height_msg = Height()
            height_msg.height = height
            
            gait_msg = Gait()
            gait_msg.type = gait

            step_msg = Bool()
            step_msg.data = step

            attack_msg = Bool()
            attack_msg.data = 1

            say_hello_msg = Bool()
            say_hello_msg.data = 1

            if (twist.linear.x != 0) | (twist.linear.y != 0) | (twist.angular.z != 0):
                pub.publish(twist)

            if(speed != 2):
                print msg
                speed_pub.publish(speed_msg)

            if(foot != 2):
                print msg
                foot_pub.publish(foot_msg)

            if(height != 2):
                print msg
                height_pub.publish(height_msg)

            if(is_gait):
                print msg
                gait_pub.publish(gait_msg)

            if(is_step):
                step_pub.publish(step_msg)

            if(is_attack):
                attack_pub.publish(attack_msg)

            if(is_say_hello):
                say_hello_pub.publish(say_hello_msg)

            x = 0
            y = 0
            th = 0
            speed = 2
            foot = 2
            height = 2
            is_gait = 0
            is_step = 0
            is_attack = 0
            is_say_hello = 0

            if (pitch == 0) & (roll == 0) & (yaw == 0):
                last_pitch = 0
                last_roll = 0
                last_yaw = 0


            pitch = 0
            roll = 0
            yaw = 0


    except:
        raise

    finally:
            print 'Keyboard_teleop finished.'
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
